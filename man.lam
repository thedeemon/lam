type Pos = (x : Int, y : Int)
type G = (vit : Int, pos : Pos, dir : Int)
type Map = [[Int]]
type Me = (vit : Int, pos : Pos, dir : Int, lives : Int, score : Int)
type W = (map : Map, me : Me, gs : [G], fruit : Int)

type Trio = (up : Int, here : Int, down : Int)
type R = (rs : [Int], nbs : Trio)
type ABC = (a : *, b : *, c : *)
type WithId = (id : Int, rest : *)
type Data = [WithId]

def nth(n : Int, xs : [*])
  if0 n then xs.hd else nth(n-1, xs.tl)
end

def length(xs : [*])
  if xs.empty then 0 else 1 + length(xs.tl)
end

def makeList(n : Int, elt : *)
  if0 n then [] else @(elt, makeList(n-1, elt))
end

def append(xs : [*], ys : [*])
  if xs.empty then ys else @(xs.hd, append(xs.tl, ys))
end

def take(n : Int, xs : [*])
  if0 n then [] else @(xs.hd, take(n-1, xs.tl))
end

def drop(n : Int, xs : [*])
  if0 n then xs else drop(n-1, xs.tl)
end

def has(xs : [Int], x : Int)
  if xs.empty then 0 else 
  if xs.hd == x then 1 else has(xs.tl, x)
end

def dataDelete(id : Int, xs : Data)
  if xs.empty then xs else
  if xs.hd.id == id then xs.tl else
  @(xs.hd, dataDelete(id, xs.tl))
end

def dataSet(x : WithId, xs : Data)
  @(x, dataDelete(x.id, xs))
end

def dataFind(id : Int, xs : Data) /* must be present */
  if xs.hd.id == id then xs.hd else dataFind(id, xs.tl)
end

def notWall(x : Int)
  if0 x then 0 else 1
end

def countFreeNb(upRow : [Int], row : [Int], downRow : [Int], left : Trio) 
  if row.empty then @([], @(0,0,0)) else
  let col : Trio = @(notWall(upRow.hd), notWall(row.hd), notWall(downRow.hd)) in
  let right : R = countFreeNb(upRow.tl, row.tl, downRow.tl, col) in
  let n : Int = if0 row.hd then 0 else left.here + col.up + col.down + right.nbs.here in
  @( @(n, right.rs), col) 
end

def take3(nFirst : Int, xs : [*])
  let t : [*] = drop(nFirst, xs) in
  @(t.hd, t.tl.hd, t.tl.tl.hd)
end

def mapFreeNb(rows : [[Int]], y : Int, res : [[Int]])
  if0 y then res else
  let rws : ABC = take3(y-1, rows) in
  let r : R = countFreeNb(rws.a, rws.b, rws.c, @(0,0,0)) in
  mapFreeNb(rows, y-1, @(r.rs, res))
end

def cellPrice(c : Int)
  if0 c then 0 else
  if c==1 then 0 else
  if c==2 then 100 else
  if c==3 then 1000 else
  if c==4 then 500 else
  if c==5 then 0 else
  if c==6 then -300 else 0
end

type RoomInfo = (id : Int, size : Int, price : Int, nbs : Int, nbIds : Data)

type CellM = (id : Int, rooms : [RoomInfo], nxtId : Int)

def tryAppend(ids : [Int], cell : Int, nbs : Int, rooms : [RoomInfo], nxtId : Int)
  if ids.empty then @(nxtId,  @( @(nxtId, 1, cellPrice(cell), nbs, []), rooms), nxtId+1) else
  if ids.hd > 0 then
    let rm : RoomInfo = dataFind(ids.hd, rooms) in
    if rm.nbs <= 2 then
      let rm1 : RoomInfo = @(ids.hd, rm.size+1, rm.price + cellPrice(cell), rm.nbs, rm.nbIds) in
      @(ids.hd, dataSet( rm1, rooms ), nxtId)
    else tryAppend(ids.tl, cell, nbs, rooms, nxtId)
  else tryAppend(ids.tl, cell, nbs, rooms, nxtId)
end

def mapCell(cell : Int, nbs : Int, downId : Int, rightId : Int, rooms : [RoomInfo], nxtId : Int)
  if0 cell then @(0, rooms, nxtId) else
  if nbs > 2 then @(nxtId,  @( @(nxtId, 1, cellPrice(cell), nbs, []), rooms), nxtId+1) else
  tryAppend([downId, rightId], cell, nbs, rooms, nxtId)
end

type RowM = (hereIds : [Int], rightId : Int, rooms : [RoomInfo], nxtId : Int)

def addNb(r : RoomInfo, nbId : Int)
  @(r.id, r.size, r.price, r.nbs, dataSet([nbId], r.nbIds))
end

def markNb(rooms : [RoomInfo], id1 : Int, id2 : Int)
  if0 id1 then rooms else
  if0 id2 then rooms else
  if id1==id2 then rooms else
  dataSet(addNb(dataFind(id2, rooms), id1), dataSet(addNb(dataFind(id1, rooms), id2), rooms))
end

def markNeighb(rooms : [RoomInfo], x : Int, a : Int, b : Int)
  markNb( markNb(rooms, x, a), x, b)
end

def mapRow(hereWld : [Int], hereNb : [Int], downIds : [Int], rooms : [RoomInfo], nxtId : Int)
  if hereWld.empty then @([], 0, rooms, nxtId) else
  let rt : RowM = mapRow(hereWld.tl, hereNb.tl, downIds.tl, rooms, nxtId) in
  let cm : CellM = mapCell(hereWld.hd, hereNb.hd, downIds.hd, rt.rightId, rt.rooms, rt.nxtId) in
  @( @(cm.id, rt.hereIds), cm.id, markNeighb( cm.rooms, cm.id, downIds.hd, rt.rightId), cm.nxtId)
end

type BMR = (idmap : Map, rooms : [RoomInfo], nxtId : Int)

def buildMap(nbmap : Map, wmap : Map, y : Int, idmap : Map, rooms : [RoomInfo], nxtId : Int, w : Int)
  if0 y then @(@(makeList(w,0),idmap), rooms, nxtId) else
  let rt : RowM = mapRow( nth(y, wmap), nth(y, nbmap), idmap.hd, rooms, nxtId) in
  buildMap(nbmap, wmap, y-1, @(rt.hereIds, idmap), rt.rooms, rt.nxtId, w)
end

type Room = (id : Int, size : Int, price : Int, nbIds : [Int])
type State = (dir : Int, idmap : Map, rooms : [Room], lastTgt : Int)

def mapfst(xs : Data)
  if xs.empty then [] else @(xs.hd.id, mapfst(xs.tl))
end

def mkRooms(rs : [RoomInfo])
  if rs.empty then [] else
  @( @(rs.hd.id, rs.hd.size, rs.hd.price, mapfst(rs.hd.nbIds) )  , mkRooms(rs.tl))
end

def init(wld : W)
  let h : Int = length(wld.map) in
  let w : Int = length(wld.map.hd) in
  let zeros : [Int] = makeList(w, 0) in
  let nbmap : [[Int]] = @(zeros, mapFreeNb(wld.map, h-2, [zeros])) in
  let rooms0 : [RoomInfo] = [@(0,0,0,0,[])] in
  let bm : BMR = buildMap(nbmap, wld.map, h-2, [zeros], rooms0, 1, w) in
  let state : State = @(0, bm.idmap, mkRooms(bm.rooms), 777) in
  /*print( dataFind(3, dataSet([2,22], [[1,10], [2,20], [3,30] ])), 0) */
  print(state, state)  
end

def getCell(pos : Pos, map : Map)
  nth(pos.x, nth(pos.y, map))
end

def mod(x : Int)
  if x >= 4 then mod(x-4) else x
end

def addVec(a : Pos, b : Pos)
  @(a.x + b.x, a.y + b.y)
end

def dirVec(dir : Int)
  nth(dir, [@(0, -1), @(1,0), @(0,1), @(-1,0)])
end

def occupRooms(gs : [G], idmap : Map)
  if gs.empty then [] else @( getCell(gs.hd.pos, idmap), occupRooms(gs.tl, idmap))
end

type Path = (total : Int, ids : [Int])

def evalNbs(ids : [Int], occ : [Int], rooms : [Room], p : Path)
  if ids.empty then [] else
  if has(occ, ids.hd) then evalNbs(ids.tl, occ, rooms, p) else
  if has(p.ids, ids.hd) then evalNbs(ids.tl, occ, rooms, p) else
  let r : Room = dataFind(ids.hd, rooms) in
  @( @(p.total + r.price, @(ids.hd, p.ids)), evalNbs(ids.tl, occ, rooms, p))  
end

def grow(p : Path, rooms : [Room], occup : [Int])
  let r : Room = dataFind(p.ids.hd, rooms) in
  evalNbs(r.nbIds, occup, rooms, p)
end

def growPaths(ps : [Path], rooms : [Room], occup : [Int])
  if ps.empty then [] else
  append( grow(ps.hd, rooms, occup), growPaths(ps.tl, rooms, occup))
end

def bestPath(ps : [Path], best : Path)
  if ps.empty then best else 
  if ps.hd.total > best.total then bestPath(ps.tl, ps.hd) else  bestPath(ps.tl, best)
end

def visited(pos : Pos, path : [Pos])
  if path.empty then 0 else
  if (path.hd.x == pos.x) * (path.hd.y == pos.y) then 1 else
  visited(pos, path.tl)    
end

def canFind(id : Int,  pos : Pos, idmap : Map, curid : Int, walked : [Pos])
  let c : Int = getCell(pos, idmap) in
  if c == id then 1 else
  if c != curid then 0 else
  if visited(pos, walked) then 0 else
  if canFind(id, @(pos.x + 1, pos.y), idmap, curid, @(pos, walked)) then 1 else
  if canFind(id, @(pos.x - 1, pos.y), idmap, curid, @(pos, walked)) then 1 else
  if canFind(id, @(pos.x, pos.y + 1), idmap, curid, @(pos, walked)) then 1 else
  if canFind(id, @(pos.x, pos.y - 1), idmap, curid, @(pos, walked)) then 1 else 0
end

def selectDir(id : Int, idmap : Map, pos : Pos, curId : Int)
  if canFind(id, addVec(pos, dirVec(0)), idmap, curId, [pos]) then 0 else
  if canFind(id, addVec(pos, dirVec(1)), idmap, curId, [pos]) then 1 else  
  if canFind(id, addVec(pos, dirVec(2)), idmap, curId, [pos]) then 2 else 3    
end

def step(state : State, wld : W)
  let occupiedIds : [Int] = occupRooms(wld.gs, state.idmap) in
  let curId : Int = getCell(wld.me.pos, state.idmap) in
  let curRoom : Room = dataFind(curId, state.rooms) in
  let ps1 : [Path] = [ @(curRoom.price, [curId]) ] in
  let ps2 : [Path] = growPaths(ps1, state.rooms, occupiedIds) in
  let ps3 : [Path] = growPaths(ps2, state.rooms, occupiedIds) in
  let ps4 : [Path] = growPaths(ps3, state.rooms, occupiedIds) in
  let psd : [Path] = growPaths(ps4, state.rooms, occupiedIds) in
  let rooms1 : [Room] = dataSet( @(curRoom.id, curRoom.size, curRoom.price / 2, curRoom.nbIds), state.rooms) in
  if psd.empty then @(state, 0) else
  let bestp : Path = if length(psd) > 1 then bestPath(psd.tl, psd.hd) else psd.hd in
  if length(bestp.ids) < 2 then @(state, 0) else
  let tgt : Int = nth( length(bestp.ids)-2, bestp.ids) in
  let newdir : Int = selectDir(tgt, state.idmap, wld.me.pos, curId) in
   /* if tgt != state.lastTgt then selectDir(tgt, state.idmap, wld.me.pos, curId) else 
    if0 getCell(addVec(wld.me.pos, dirVec(state.dir)), wld.map) then
     selectDir(tgt, state.idmap, wld.me.pos, curId) else state.dir
  in*/
  let state1 : State = @(newdir, state.idmap, rooms1, tgt) in
  @(state1, print(@(curRoom, bestp), newdir))  
end


